#!/usr/bin/env python@TECA_PYTHON_VERSION@
from teca import *
import sys
import argparse
import numpy as np
try:
    from mpi4py import MPI
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
except ImportError:
    rank = 0


def main():
    # parse the command line
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--input_file', type=str, required=False,
        help='file path to the simulation to search for atmospheric rivers'
    )

    parser.add_argument(
        '--input_regex', type=str, required=False,
        help='regex matching simulation files to search for atmospheric rivers'
    )

    parser.add_argument(
        '--output_file', type=str, required=False,
        default=r'deeplabv3p_ar_detect_%t%.nc',
        help=r'file pattern for output netcdf files (%%t%% is the time index)'
    )

    parser.add_argument(
        '--ivt', type=str, default='IVT',
        help='name of variable with integrated vapor transport (IVT)'
    )

    parser.add_argument(
        '--pytorch_deeplab_model', type=str, required=False,
        help='the pretrained deeplabv3plus model file'
    )

    parser.add_argument(
        '--pytorch_resnet_model', type=str, required=False,
        help='the pretrained resnet model file'
    )

    parser.add_argument(
        '--t_axis_variable', type=str, required=False,
        help='time dimension name'
    )

    parser.add_argument(
        '--t_calendar', type=str, required=False,
        help='time calendar'
    )

    parser.add_argument(
        '--t_units', type=str, required=False,
        help='time unit'
    )

    parser.add_argument(
        '--filename_time_template', type=str, required=False,
        help='filename time template'
    )

    parser.add_argument(
        '--compression_level', type=int, required=False,
        help='the compression level used for each variable'
    )

    parser.add_argument(
        '--date_format', type=str, required=False,
        help='the format for the date to write in the filename'
    )

    parser.add_argument(
        '--first_step', type=int, required=False,
        help='first time step to process'
    )

    parser.add_argument(
        '--last_step', type=int, required=False,
        help='last time step to process'
    )

    parser.add_argument(
        '--steps_per_file', type=int, required=False,
        help='number of time steps per output file'
    )

    parser.add_argument(
        '--start_date', type=str, required=False,
        help='first time to proces in YYYY-MM-DD hh:mm:ss format'
    )

    parser.add_argument(
        '--end_date', type=str, required=False,
        help='end time to proces in YYYY-MM-DD hh:mm:ss format'
    )

    args = parser.parse_args()

    if not args.input_file and not args.input_regex:
        if rank == 0:
            raise parser.error(
                    "missing file name or regex for simulation reader. "
                    "See --help for a list of command line options."
            )

    cf_reader = teca_cf_reader.New()

    coords = teca_normalize_coordinates.New()
    coords.set_input_connection(cf_reader.get_output_port())

    deeplabv3p_ar_detect = teca_deeplabv3p_ar_detect.New()
    deeplabv3p_ar_detect.set_input_connection(coords.get_output_port())

    teca_exec = teca_index_executive.New()

    cf_writer = teca_cf_writer.New()
    cf_writer.set_input_connection(
        deeplabv3p_ar_detect.get_output_port()
    )
    cf_writer.set_thread_pool_size(1)

    if args.input_file:
        cf_reader.append_file_name(
            args.input_file
        )

    if args.input_regex:
        cf_reader.set_files_regex(
            args.input_regex
        )

    if args.output_file:
        cf_writer.set_file_name(
            args.output_file
        )

    if args.ivt:
        deeplabv3p_ar_detect.set_variable_name(
            args.ivt
        )

    if args.pytorch_deeplab_model and args.pytorch_resnet_model:
        deeplabv3p_ar_detect.build_model(
            args.pytorch_deeplab_model,
            args.pytorch_resnet_model
        )
    else:
        deeplabv3p_ar_detect.build_model()

    if args.t_axis_variable is not None:
        cf_reader.set_t_axis_variable(
            args.t_axis_variable
        )

    if args.t_calendar:
        cf_reader.set_t_calendar(
            args.t_calendar
        )

    if args.t_units:
        cf_reader.set_t_units(
            args.t_units
        )

    if args.filename_time_template:
        cf_reader.set_filename_time_template(
            args.filename_time_template
        )

    if args.compression_level:
        cf_writer.set_compression_level(
            args.compression_level
        )

    if args.date_format:
        cf_writer.set_date_format(
            args.date_format
        )

    if args.first_step:
        cf_writer.set_first_step(
            args.first_step
        )

    if args.last_step:
        cf_writer.set_last_step(
            args.last_step
        )

    if args.steps_per_file:
        cf_writer.set_steps_per_file(
            args.steps_per_file
        )

    # some minimal check for missing options
    if (cf_reader.get_number_of_file_names() == 0 and
        not cf_reader.get_files_regex()):
        if rank == 0:
            raise ValueError(
                "missing file name or regex for simulation reader. "
                "See --help for a list of command line options."
            )

    if not cf_writer.get_file_name():
        if rank == 0:
            raise ValueError(
                "missing file name pattern for netcdf writer. "
                "See --help for a list of command line options."
            )

    if args.start_date or args.end_date:

        time_atts = atrs["time"]
        calendar = time_atts["calendar"]
        units = time_atts["units"]

        coords = md["coordinates"]
        time = coords["t"]

        # convert date string to step, start date
        if args.start_date:
            first_step = teca_coordinate.time_step_of(
                time, True, calendar, units, args.start_date
            )
            cf_writer.set_first_step(first_step)

        # and end date
        if args.end_date:
            last_step = teca_coordinate.time_step_of(
                time, False, calendar, units, args.end_date
            )
            cf_writer.set_last_step(last_step)

    # run the pipeline
    cf_writer.set_executive(teca_exec)
    cf_writer.update()


if __name__ == '__main__':
    main()
